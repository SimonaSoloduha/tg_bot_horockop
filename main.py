import os
from dotenv import load_dotenv

from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from buttons import button_appendix, znaki_zodiaka_inline, button_compatibility, button_yes, to_day_inline
from messages import HOROSCOPE_COMPATIBILITY, HOROSCOPE_TOMORROW, HOROSCOPE_ABOUT, HOROSCOPE_FOR_ONE, HOROSCOPE_FOR_ALL, \
    HOROSCOPE_ABOUT_APPENDIX, MASSAGES_HOROSCOPE_ABOUT, HOROSCOPE_COMPATIBILITY_YES, HOROSCOPE_COMPATIBILITY_SHE, \
    HOROSCOPE_TODAY

from parser import parse_horoscope_for_all, parse_horoscope_for_zodiac, parse_horoscope_compatibility


load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN, parse_mode='HTML')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())


def get_start_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton(text=HOROSCOPE_TODAY), KeyboardButton(text=HOROSCOPE_TOMORROW)],
        [KeyboardButton(text=HOROSCOPE_COMPATIBILITY), KeyboardButton(text=HOROSCOPE_ABOUT)],
    ]
    start_keyboard = ReplyKeyboardMarkup(keyboard=kb,
                                         resize_keyboard=True,
                                         input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ—Å–∫–æ–ø")
    return start_keyboard


# –í—ã–±–æ—Ä –≥–æ—Ä–æ—Å–∫–æ–ø–∞
@dp.message_handler(commands="start")
async def bot_start(msg: Message):
    await msg.answer("–ó–¥—Ä–∞–≤—Å—Ç—É–π, –¥–æ—Ä–æ–≥–æ–π!\n–ì–∞–¥–∞–ª–∫–∞ –±–∞–±–∞ –°–∏–º–∞ —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üíã \n\n–¢—ã —Ç–∞–∫ –ø–æ—Ö–æ—Ä–æ—à–µ–ª üëÄ\n\n"
                     f"{msg.from_user['first_name']}, c–µ–π—á–∞—Å —Ç–µ–±–µ –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∂—É, –ø–æ–∫–∞–∂—É, –ø—Ä–µ–¥—Å–∫–∞–∂—É\n\n")
    await msg.answer("–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?\n(–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)",
                     reply_markup=get_start_keyboard())


# –ù–∞ —Å–µ–≥–æ–¥–Ω—è / –Ω–∞ –∑–∞–≤—Ç—Ä–∞
@dp.message_handler(text=[HOROSCOPE_TODAY, HOROSCOPE_TOMORROW])
async def get_horoscope_today_or_tomorrow(msg: Message, state: FSMContext):
    horoscope_type = msg.text
    await state.update_data(horoscope_type=horoscope_type)
    await bot.send_sticker(chat_id=msg.from_user.id,
                           sticker=r"CAACAgIAAxkBAAEHugdj6kB-vghC45TQdY7Orfzr7r0GMgACSwADHSyIEAlSEdc6e9GbLgQ")
    await msg.answer(
        f'–ò —Å–∫–∞–∂–∏, –º–æ—è —Ö–æ—Ä–æ—à–∞—è, {horoscope_type.lower()[1::]} —Å–º–æ—Ç—Ä–∏–º –¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞? üëÄ',
        reply_markup=to_day_inline)


# –î–ª—è –æ–¥–Ω–æ–≥–æ
@dp.callback_query_handler(text=HOROSCOPE_FOR_ONE)
async def get_horoscope_for_one(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(horoscope_for=HOROSCOPE_FOR_ONE)
    await callback.message.answer(f'–•–æ—Ä–æ—à–æ, –¥–æ—Ä–æ–≥–æ–π, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', reply_markup=znaki_zodiaka_inline)


# –î–ª—è –≤—Å–µ—Ö
@dp.callback_query_handler(text=HOROSCOPE_FOR_ALL)
async def get_horoscope_for_all(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(horoscope_for=HOROSCOPE_FOR_ALL)
    user_data = await state.get_data()
    horoscope_type = user_data.get('horoscope_type')
    if horoscope_type == HOROSCOPE_TODAY:
        day = 'today'
    else:
        day = 'tomorrow'
    horoscope = parse_horoscope_for_all(day)
    await callback.message.answer(f'{horoscope_type} –¥–ª—è –≤—Å–µ—Ö:\n\n')
    await callback.message.answer(horoscope)


# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
@dp.message_handler(text=HOROSCOPE_ABOUT)
async def get_horoscope_about(msg: types.Message, state: FSMContext):
    await state.update_data(horoscope_type=HOROSCOPE_ABOUT)
    await bot.send_sticker(chat_id=msg.from_user.id,
                           sticker=r"CAACAgIAAxkBAAEHuftj6j-9QNmF1vzjEWfaw2c4BJ5IAgACKwADHSyIEK0mOYz9LdfMLgQ")
    await msg.answer(f'–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å—é –ø—Ä–∞–≤–¥—É –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–Ω–∞–∫?', reply_markup=button_yes)


# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.callback_query_handler(text=HOROSCOPE_ABOUT_APPENDIX)
async def get_horoscope_about_appendix(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    zodiac = user_data.get('zodiac')
    appendix = MASSAGES_HOROSCOPE_ABOUT[zodiac]['appendix']
    await callback.message.answer(appendix)


# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@dp.message_handler(text=HOROSCOPE_COMPATIBILITY)
async def get_horoscope_compatibility(msg: Message, state: FSMContext):
    await state.update_data(horoscope_type=HOROSCOPE_COMPATIBILITY)
    await bot.send_sticker(chat_id=msg.from_user.id,
                           sticker=r"CAACAgIAAxkBAAEHrm5j536V_vJWvdZ_4uR3pPEBHGZxBgACEQADHSyIEEmpmwABW2ZL_i4E")
    await msg.answer(f'–û–π –æ–π –æ–π) –ê –∫—Ç–æ-—Ç–æ —É –Ω–∞—Å –≤–ª—é–±–∏–ª—Å—è?', reply_markup=button_compatibility)


# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–Ω
@dp.callback_query_handler(text=HOROSCOPE_COMPATIBILITY_YES)
async def get_horoscope_compatibility_he(callback: types.CallbackQuery):
    await callback.message.answer(f'–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–µ—Ä—å–µ–∑–Ω–æ, –∑–∞–π–∫–∞ –º–æ—è. –ö—Ç–æ –û–ù –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É?',
                                  reply_markup=znaki_zodiaka_inline)


# –≥–æ—Ä–æ—Å–∫–æ–º –¥–ª—è –∑–Ω–∞–∫–∞
@dp.callback_query_handler(text_startswith="znak_")
async def get_horoscope_for_zodiac(callback: types.CallbackQuery, state: FSMContext):
    zodiac = callback.data.split("_")[1]
    user_data = await state.get_data()

    horoscope_type = user_data.get('horoscope_type')
    horoscope_compatibility_he = user_data.get('horoscope_compatibility_he')
    try:
        await state.update_data(zodiac=zodiac)
        if horoscope_type == HOROSCOPE_ABOUT:
            horoscope_message = MASSAGES_HOROSCOPE_ABOUT[zodiac]['main']
            horoscope_stick = MASSAGES_HOROSCOPE_ABOUT[zodiac]['sticker']
            await bot.send_sticker(chat_id=callback.from_user.id,
                                   sticker=horoscope_stick)
            await callback.message.answer(horoscope_message, reply_markup=button_appendix)

        elif horoscope_type == HOROSCOPE_TODAY or horoscope_type == HOROSCOPE_TOMORROW:
            if horoscope_type == HOROSCOPE_TODAY:
                day = 'today'
            else:
                day = 'tomorrow'
            horoscope = parse_horoscope_for_zodiac(zodiac, day)
            zodiac_str = zodiac.upper()
            zodiac = globals().get(zodiac_str)
            await callback.message.answer(f'{zodiac} {horoscope_type}:\n\n')
            await callback.message.answer(horoscope)

        elif horoscope_type == HOROSCOPE_COMPATIBILITY:
            if horoscope_compatibility_he:
                horoscope = parse_horoscope_compatibility(horoscope_compatibility_he, zodiac)
                zodiac_str = zodiac.upper()
                zodiac = globals().get(zodiac_str)
                horoscope_compatibility_he_str = horoscope_compatibility_he.upper()
                horoscope_compatibility_he = globals().get(horoscope_compatibility_he_str)
                await callback.message.answer(f'{horoscope_type} –¥–ª—è: –º—É–∂—á–∏–Ω–∞ - {horoscope_compatibility_he} –∏ '
                                              f'–¥–µ–≤—É—à–∫–∞ {zodiac}:\n\n')
                await state.finish()
                for msg_horoscope in horoscope:
                    await callback.message.answer(msg_horoscope)
            else:
                await state.update_data(horoscope_compatibility_he=zodiac)
                await callback.message.answer(HOROSCOPE_COMPATIBILITY_SHE, reply_markup=znaki_zodiaka_inline)
    except KeyError as e:
        await callback.message.answer(f'–¢–∞–∫, {callback.from_user["first_name"]}, —Ç–æ —Ç–æ –∑–∞—Ö–æ–¥–∏—à—å, '
                                      f'—Ç–æ –≤—ã—Ö–æ–¥–∏—à—å, '
                                      f'—è –∑–∞–±—ã–ª–∞ –æ —á–µ–º –º—ã –≥–æ—Ä–æ—Ä–∏–ª–∏. –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞, –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É')
        await state.finish()

# zodiacs
OVEN = '‚ôàÔ∏è –û–≤–µ–Ω'
TELEC = '‚ôâÔ∏è –¢–µ–ª–µ—Ü'
BLIZNECY = '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã'
RAK = '‚ôãÔ∏è –†–∞–∫'
LEV = '‚ôåÔ∏è –õ–µ–≤'
DEVA = '‚ôçÔ∏è –î–µ–≤–∞'
VESY = '‚ôéÔ∏è –í–µ—Å—ã'
SCORPION = '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω'
STRELEC = '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü'
KOZEROG = '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥'
VODOLEI = '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π'
RYBY = '‚ôìÔ∏è –†—ã–±—ã'

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
